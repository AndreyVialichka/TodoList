{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","errorAppStatusAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setAppIsInitializedAC","appReducer","RemoveTodolistAC","index","findIndex","tl","splice","AddTodolistAC","unshift","todolist","filter","entityStatus","ChangeTodolistTitleAC","ChangeTodolistFilterAC","setTososAC","todos","map","t","ChangeTodolistEntityStatusAC","todolistsReducer","changeTaskStatusAC","tasks","changeTaskTitleusAC","extraReducers","builder","addCase","forEach","fetchTasksTC","fulfilled","createTasksTC","res","item","todoListId","removeTasksTC","todolistID","taskID","tasksReducer","createAsyncThunk","thunkAPI","a","items","param","resultCode","AddItemForm","React","memo","addItem","disabled","console","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","task","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","todolists","useSelector","auth","then","catch","changeStatus","getState","find","startDate","priority","description","deadline","updateTaskStatusTC","newTitle","changeTodolistTitleTC","addTodolist","finally","addTodolistsTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","type","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","render","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d7659d48.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '323fc255-dee3-41a3-8d10-d4e9cc27274b'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        debugger\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n       const promise =  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n       return promise\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {errorAppStatusAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(errorAppStatusAC( {error: data.messages[0]} ))\r\n    } else {\r\n        dispatch(errorAppStatusAC( {error:'Some error occurred'} ))\r\n    }\r\n    dispatch(setAppStatusAC( { status:'failed'} ))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(errorAppStatusAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({ status:'failed'}))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from '../../api/todolists-api'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport { AxiosError } from 'axios';\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value;\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer;\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    authAPI.login(data)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            //@ts-ignore\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\n\r\nexport const logOutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    authAPI.logout()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n             //@ts-ignore\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\n// types\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI} from '../api/todolists-api'\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer'\r\nimport { PayloadAction, createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\r\n            state.status = action.payload.status\r\n        },\r\n        errorAppStatusAC: (state, action: PayloadAction<{ error: null | string }>) => {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppIsInitializedAC: (state, action: PayloadAction<{ value: boolean }>) => {\r\n            state.isInitialized = action.payload.value\r\n        },\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer;\r\nexport const {setAppStatusAC, errorAppStatusAC, setAppIsInitializedAC} = slice.actions\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppIsInitializedAC({value:false}));\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value:true}));\r\n        } else {\r\n\r\n        }\r\n\r\n        dispatch(setAppIsInitializedAC({value:true}));\r\n    })\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof errorAppStatusAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\n\r\nexport type ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | ReturnType<typeof setAppIsInitializedAC>\r\n","import {todolistsAPI, TodolistType} from \"../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ActionsType, RequestStatusType, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\n//Types\r\nexport type RemoveTodolistActionType = ReturnType<typeof RemoveTodolistAC>\r\nexport type AddTodolistActionType = ReturnType<typeof AddTodolistAC>\r\nexport type ChangeTodolistTitleActionType = ReturnType<typeof ChangeTodolistTitleAC>\r\nexport type ChangeTodolistFilterActionType = ReturnType<typeof ChangeTodolistFilterAC>\r\nexport type setTososType = ReturnType<typeof setTososAC>\r\nexport type ChangeTodolistEntityStatusAT = ReturnType<typeof ChangeTodolistEntityStatusAC>\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\nexport type FilterValueType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValueType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport type ActionType = RemoveTodolistActionType | AddTodolistActionType |\r\n    ChangeTodolistTitleActionType | ChangeTodolistFilterActionType |\r\n    setTososType | ActionsType | ChangeTodolistEntityStatusAT\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        RemoveTodolistAC: (state, action: PayloadAction<{ id: string }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            if (index > -1) {\r\n                state.splice(index, 1);\r\n            }\r\n        },\r\n        AddTodolistAC: (state, action: PayloadAction<{ todolist: TodolistType }>) => {\r\n            state.unshift({...action.payload.todolist, filter: \"all\", entityStatus: \"idle\"})\r\n        },\r\n        ChangeTodolistTitleAC: (state, action: PayloadAction<{ id: string, title: string }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].title = action.payload.title\r\n        },\r\n        ChangeTodolistFilterAC: (state, action: PayloadAction<{ id: string, filter: FilterValueType }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        setTososAC: (state, action: PayloadAction<{ todos: TodolistType[] }>) => {\r\n           return  action.payload.todos.map((t) => ({...t, filter: 'all', entityStatus: \"idle\"}))\r\n        },\r\n        ChangeTodolistEntityStatusAC: (state, action: PayloadAction<{ id: string, entityStatus: RequestStatusType }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].entityStatus = action.payload.entityStatus\r\n        },\r\n\r\n    }\r\n})\r\n\r\n\r\n\r\nexport const todolistsReducer = slice.reducer;\r\nexport const {\r\n    RemoveTodolistAC, AddTodolistAC, ChangeTodolistFilterAC,\r\n    ChangeTodolistTitleAC, setTososAC, ChangeTodolistEntityStatusAC\r\n} = slice.actions\r\n\r\n\r\n//Thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch<ActionType>) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTososAC({todos: res.data}))\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            })\r\n            .catch((error: AxiosError) => handleServerNetworkError({message: error.message}, dispatch))\r\n    }\r\n}\r\n\r\nexport const removeTodolistsTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<ActionType>) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        dispatch(ChangeTodolistEntityStatusAC({id: todolistId, entityStatus: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(RemoveTodolistAC({id: todolistId}))\r\n                    dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error: AxiosError) => {\r\n                handleServerNetworkError({message: error.message}, dispatch)\r\n                dispatch(ChangeTodolistEntityStatusAC({id: todolistId, entityStatus: 'idle'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistsTC = (title: string) => {\r\n    return (dispatch: Dispatch<ActionType>) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(AddTodolistAC({todolist: res.data.data.item}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error: AxiosError) => handleServerNetworkError({message: error.message}, dispatch))\r\n            .finally(() => {\r\n                dispatch(setAppStatusAC({status: \"idle\"}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionType>) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(ChangeTodolistTitleAC({id: id, title}))\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            })\r\n    }\r\n}","import {\r\n    AddTodolistAC,\r\n    AddTodolistActionType,\r\n    RemoveTodolistAC,\r\n    RemoveTodolistActionType, setTososAC,\r\n    setTososType\r\n} from \"./todolists-reducer\";\r\nimport {todolistsAPI, TaskStatuses, TaskType} from \"../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {ActionsType, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport { action } from \"@storybook/addon-actions\";\r\n\r\n\r\n\r\n//Types\r\n\r\nexport type ChangeTaskStatusActionType = ReturnType<typeof changeTaskStatusAC>\r\nexport type ChangeTaskTitleActionType = ReturnType<typeof changeTaskTitleusAC>\r\n\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type ActionType = ChangeTaskStatusActionType\r\n    | AddTodolistActionType\r\n    | ChangeTaskTitleActionType\r\n    | RemoveTodolistActionType | setTososType \r\n    | ActionsType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasksReducer',\r\n    initialState,\r\n    reducers: {\r\n\r\n        changeTaskStatusAC: (state, action: PayloadAction<{ taskId: string, status: TaskStatuses, todolistId: string }>) => {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if (index > -1) {\r\n                tasks[index].status = action.payload.status\r\n            }\r\n        },\r\n        changeTaskTitleusAC: (state, action: PayloadAction<{ taskId: string, title: string, todolistId: string }>) => {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if (index > -1) {\r\n                tasks[index].title = action.payload.title\r\n            }\r\n        },\r\n\r\n\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(AddTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(RemoveTodolistAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(setTososAC, (state, action) => {\r\n            action.payload.todos.forEach((t: any) => {\r\n                state[t.id] = []\r\n            })\r\n        });\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            debugger\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        });\r\n        builder.addCase(createTasksTC.fulfilled, (state,action) => {\r\n            //@ts-ignore\r\n                state[action.payload.res.data.item.todoListId].unshift(action.payload.res.data.item)\r\n                debugger\r\n        })\r\n        builder.addCase(removeTasksTC.fulfilled, (state,action) => {\r\n            const tasks = state[action.payload.todolistID];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskID);\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n    })\r\n    }\r\n\r\n})\r\n\r\n\r\nexport const tasksReducer = slice.reducer;\r\nexport const {\r\n changeTaskStatusAC, changeTaskTitleusAC\r\n} = slice.actions\r\n\r\n\r\n\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId:string,thunkAPI) => {\r\n    const {dispatch} = thunkAPI\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    const res = await todolistsAPI.getTasks(todolistId)\r\n    dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n    return {tasks: res.data.items, todolistId}\r\n})\r\n\r\nexport const createTasksTC = createAsyncThunk('tasks/createTask', async (param : { todolistId:string,title:string },thunkAPI) => {\r\n    const {dispatch} = thunkAPI\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    try {\r\n        const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n        return {res: res.data}\r\n    } catch (error){\r\n        //@ts-ignore\r\n        handleServerNetworkError({message: error.message}, dispatch)\r\n    }\r\n})\r\n\r\nexport const removeTasksTC = createAsyncThunk('tasks/removeTasks', async (param:{todolistId:string,taskId:string},thunkAPI) => {\r\n    const {dispatch} = thunkAPI\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    const res = await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n    }\r\n    return {taskID: param.taskId, todolistID:param.todolistId}\r\n})\r\n\r\nexport const updateTaskStatusTC = (taskId: string, todolistId: string, status: TaskStatuses) => (dispatch: Dispatch<ActionType>, getState: () => AppRootStateType) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    const allTasksFromState = getState().tasks;\r\n    const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n    const task = tasksForCurrentTodolist.find(t => {\r\n        return t.id === taskId\r\n    })\r\n    if (task) {\r\n        todolistsAPI.updateTask(todolistId, taskId, {\r\n            title: task.title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n            status: status\r\n        }).then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const action = changeTaskStatusAC({taskId, status, todolistId})\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n            .catch((error) => {\r\n                handleServerNetworkError({message: error.message}, dispatch)\r\n            })\r\n    }\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValueType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValueType, todolistId: string) => void\r\n    addTask: (todolistId: string, title: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(  title,props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {  \r\n                tasksForTodolist.map(t =>  <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistsTC,\r\n    ChangeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValueType,\r\n    removeTodolistsTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {createTasksTC, removeTasksTC, TasksStateType, updateTaskStatusTC,changeTaskTitleusAC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTasksTC({taskId:id,todolistId:todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        debugger\r\n        const thunk = createTasksTC({todolistId, title})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskStatusTC(id, todolistId,status)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = changeTaskTitleusAC({\r\n            taskId: id,\r\n            title:newTitle,\r\n            todolistId\r\n        })\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValueType, todolistId: string) {\r\n        const action = ChangeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistsTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = dispatch(changeTodolistTitleTC( id, title))\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistsTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {errorAppStatusAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(errorAppStatusAC({error:null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {loginTC} from './auth-reducer'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"} />\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {BrowserRouter, HashRouter, Route} from 'react-router-dom'\r\nimport {Login} from '../features/Login/Login'\r\nimport {logOutTC} from '../features/Login/auth-reducer'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logOutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <HashRouter>\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                </Container>\r\n            </div>\r\n        </HashRouter>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../features/Login/auth-reducer'\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport {AnyAction} from 'redux';\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport const store = configureStore({\r\n    reducer:rootReducer,\r\n    middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware()\r\n      .prepend(thunkMiddleware,)\r\n})\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType,\r\n    AppRootStateType,\r\n    unknown,\r\n    AnyAction>\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}